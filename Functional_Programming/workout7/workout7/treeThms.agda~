module treeThms where

open import lib

-- simple Tree type storing natural numbers
data Tree : Set where
  Node : ‚Ñï ‚Üí Tree ‚Üí Tree ‚Üí Tree
  Leaf : Tree

mirror : Tree ‚Üí Tree
mirror (Node x t1 t2) = Node x (mirror t2) (mirror t1)
mirror Leaf = Leaf

mirror-mirror : ‚àÄ (t : Tree) ‚Üí mirror (mirror t) ‚â° t
mirror-mirror (Node x a b) rewrite mirror-mirror a | mirror-mirror b = refl
mirror-mirror Leaf   = refl

size : Tree ‚Üí ‚Ñï
size (Node x t t‚ÇÅ) = 1 + size t + size t‚ÇÅ
size Leaf = 1

height : Tree ‚Üí ‚Ñï
height (Node x t t‚ÇÅ) = 1 + (max (height t) (height t‚ÇÅ))
height Leaf = 0

numLeaves : Tree ‚Üí ‚Ñï
numLeaves (Node x t t‚ÇÅ) = numLeaves t + numLeaves t‚ÇÅ
numLeaves Leaf = 1

perfect : ‚Ñï ‚Üí Tree
perfect zero = Leaf
perfect (suc n) = Node 1 (perfect n) (perfect n)

-- I found I needed the +0 theorem from nat-thms.agda in the IAL
perfect-numLeaves : ‚àÄ(n : ‚Ñï) ‚Üí numLeaves (perfect n) ‚â° 2 pow n
perfect-numLeaves zero = refl
perfect-numLeaves (suc a) rewrite perfect-numLeaves a | +0 (2 pow a) = refl
 


perfect-size : ‚àÄ(n : ‚Ñï) ‚Üí suc (size (perfect n)) ‚â° 2 pow (suc n)
perfect-size zero = refl
perfect-size  a rewrite +0 (2 pow a) = {!!}

{-
perfect-size : ‚àÄ(n : ‚Ñï) ‚Üí suc (size (perfect n)) ‚â° 2 pow (suc n)
perfect-size zero = refl
perfect-size (suc a) rewrite perfect-size a | +0 ((2 pow a) + ((2 pow a) + 0)) | +0 (2 pow a) | +assoc ((2 pow a) + (2 pow a))  (2 pow a) (2 pow a)  = {!!}
-}

-- helper lemma I found I needed below
max-same : ‚àÄ (n : ‚Ñï) ‚Üí max n n ‚â° n
max-same n rewrite <-irrefl n = refl

perfect-height : ‚àÄ(n : ‚Ñï) ‚Üí height (perfect n) ‚â° n
perfect-height n  = {!!}

numNodes : Tree ‚Üí ‚Ñï
numNodes (Node x t1 t2) = 1 + numNodes t1 + numNodes t2 
numNodes Leaf = 0

-- flatten a tree into a list of all the values stored at the nodes
prefixFlatten : Tree ‚Üí ùïÉ ‚Ñï
prefixFlatten (Node x t1 t2) = x :: prefixFlatten t1 ++ prefixFlatten t2
prefixFlatten Leaf = []

-- I found I needed a theorem from list-thms.agda in the IAL
length-flatten : ‚àÄ(t : Tree) ‚Üí numNodes t ‚â° length (prefixFlatten t)
length-flatten = {!!}
